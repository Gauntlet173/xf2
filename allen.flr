// Allen.flr
// An implementation of Allen Interval Algebra in Flora-2
// Written by Jason Morris for the Singapore Management University Centre for Computational Law
// Intended for educational and research purposes only.
// Based on "Allen's Interval Algebra", Thomas A. Alspaugh, https://thomasalspaugh.org/pub/fnd/allen.html,
// retrieved November 16, 2020. 

:- compiler_options{expert=on}.

Allen_Interval[|
    allen_relationship(Allen_Interval)=>Allen_Relationship,
    linked(Allen_Interval)=>Allen_Link, // not currently using.
    strongest_implied_relationship(Allen_Interval)=>Allen_Relationship
|].

Allen_Basic_Relation[|
  converse=>Allen_Basic_Relation,
  composition(Allen_Basic_Relation)=>Allen_Relationship
|].

precedes:Allen_Basic_Relation[converse_method->preceded_by].
preceded_by:Allen_Basic_Relation[converse_method->precedes].
meets:Allen_Basic_Relation[converse_method->met_by].
met_by:Allen_Basic_Relation[converse_method->meets].
overlaps:Allen_Basic_Relation[converse_method->overlapped_by].
overlapped_by:Allen_Basic_Relation[converse_method->overlaps].
finishes:Allen_Basic_Relation[converse_method->finished_by].
finished_by:Allen_Basic_Relation[converse_method->finishes].
contains:Allen_Basic_Relation[converse_method->during].
during:Allen_Basic_Relation[converse_method->contains].
starts:Allen_Basic_Relation[converse_method->started_by].
started_by:Allen_Basic_Relation[converse_method->starts].
equal_to:Allen_Basic_Relation[converse_method->equal_to].

Allen_Relationship[|
    complement=>Allen_Relationship, // Gives a relationship with all the properties this one does not have.
    converse=>Allen_Relationship, // Gives the relationship from interval2 to interval1.
    composition(Allen_Relationship)=>Allen_Relationship, // if interval1 has relation A to interval2, and interval2 has relation B to interval3, gives relation between 1 and 3.
    intersection(Allen_Relationship)=>Allen_Relationship, // similarities between relation A and B
    union(Allen_Relationship)=>Allen_Relationship // combination of relation A and B
|].

?x[%display] :-
  ?x:Allen_Relationship,
  \if ?x[precedes] \then write('p')@\io,
  \if ?x[preceded_by] \then write('P')@\io,
  \if ?x[meets] \then write('m')@\io,
  \if ?x[met_by] \then write('M')@\io,
  \if ?x[overlaps] \then write('o')@\io,
  \if ?x[overlapped_by] \then write('O')@\io,
  \if ?x[finishes] \then write('f')@\io,
  \if ?x[finished_by] \then write('F')@\io,
  \if ?x[during] \then write('d')@\io,
  \if ?x[contains] \then write('D')@\io,
  \if ?x[starts] \then write('s')@\io,
  \if ?x[started_by] \then write('S')@\io,
  \if ?x[equal_to] \then write('e')@\io,
  write('\n')@\io.

// Each of the allen basic relationships may be true or false with regard to (are a boolean method of) an allen relationship
Allen_Relationship[|=>?meth|] :-
  ?meth:Allen_Basic_Relation.

// There are only 27 Allen_Relationships that are the result of composing two basic
// relationships, so we set them out explicitly.
ar(p):Allen_Relationship[
    precedes
].
ar(P):Allen_Relationship[
    preceded_by
].
ar(d):Allen_Relationship[
    during
].
ar(D):Allen_Relationship[
    contains
].
ar(oFD):Allen_Relationship[
    overlaps,
    finished_by,
    contains
].
ar(osd):Allen_Relationship[
    overlaps,
    starts,
    during
].
ar(dfO):Allen_Relationship[
    during,
    finishes,
    overlapped_by
].
ar(DSO):Allen_Relationship[
    contains,
    started_by,
    overlapped_by
].
ar(pmoFD):Allen_Relationship[
    precedes,
    contains,
    overlaps,
    finished_by,
    meets
].
ar(pmosd):Allen_Relationship[
    precedes,
    during,
    overlaps,
    starts,
    meets
].
ar(dfOMP):Allen_Relationship[
    preceded_by,
    during,
    overlapped_by,
    finishes,
    met_by
].
ar(DSOMP):Allen_Relationship[
    preceded_by,
    contains,
    overlapped_by,
    started_by,
    met_by
].
ar(m):Allen_Relationship[
    meets
].
ar(M):Allen_Relationship[
    met_by
].
ar(o):Allen_Relationship[
    overlaps
].
ar(O):Allen_Relationship[
    overlapped_by
].
ar(pmo):Allen_Relationship[
    precedes,
    overlaps,
    meets
].
ar(OMP):Allen_Relationship[
    preceded_by,
    overlapped_by,
    met_by
].
ar(s):Allen_Relationship[
    starts
].
ar(S):Allen_Relationship[
    started_by
].
ar(full):Allen_Relationship[
    precedes,
    preceded_by,
    meets,
    met_by,
    overlaps,
    overlapped_by,
    finishes,
    finished_by,
    during,
    contains,
    starts,
    started_by,
    equal_to
].
ar(concur):Allen_Relationship[
    overlaps,
    overlapped_by,
    finished_by,
    finishes,
    during,
    contains,
    starts,
    started_by,
    equal_to
].
ar(F):Allen_Relationship[
    finished_by
].
ar(f):Allen_Relationship[
    finishes
].
ar(Fef):Allen_Relationship[
    equal_to,
    finishes,
    finished_by
].
ar(seS):Allen_Relationship[
    equal_to,
    starts,
    started_by
].
ar(e):Allen_Relationship[
    equal_to
].

// Now we can use those defined relationships as the results of the composition methods of the
// basic relationships.
precedes[composition(precedes)->ar(p)].
precedes[composition(preceded_by)->ar(full)].
precedes[composition(meets)->ar(p)].
precedes[composition(met_by)->ar(pmosd)].
precedes[composition(overlaps)->ar(p)].
precedes[composition(overlapped_by)->ar(pmosd)].
precedes[composition(finishes)->ar(pmosd)].
precedes[composition(finished_by)->ar(p)].
precedes[composition(contains)->ar(p)].
precedes[composition(during)->ar(pmosd)].
precedes[composition(starts)->ar(p)].
precedes[composition(started_by)->ar(p)].
precedes[composition(equal_to)->ar(p)].

preceded_by[composition(precedes)->ar(full)].
preceded_by[composition(preceded_by)->ar(P)].
preceded_by[composition(meets)->ar(dfOMP)].
preceded_by[composition(met_by)->ar(P)].
preceded_by[composition(overlaps)->ar(dfOMP)].
preceded_by[composition(overlapped_by)->ar(P)].
preceded_by[composition(finishes)->ar(P)].
preceded_by[composition(finished_by)->ar(P)].
preceded_by[composition(contains)->ar(P)].
preceded_by[composition(during)->ar(dfOMP)].
preceded_by[composition(starts)->ar(dfOMP)].
preceded_by[composition(started_by)->ar(P)].
preceded_by[composition(equal_to)->ar(P)].

meets[composition(precedes)->ar(p)].
meets[composition(preceded_by)->ar(DSOMP)].
meets[composition(meets)->ar(p)].
meets[composition(met_by)->ar(Fef)].
meets[composition(overlaps)->ar(p)].
meets[composition(overlapped_by)->ar(osd)].
meets[composition(finishes)->ar(osd)].
meets[composition(finished_by)->ar(pmo)].
meets[composition(contains)->ar(p)].
meets[composition(during)->ar(osd)].
meets[composition(starts)->ar(m)].
meets[composition(started_by)->ar(m)].
meets[composition(equal_to)->ar(m)].

met_by[composition(precedes)->ar(pmoFD)].
met_by[composition(preceded_by)->ar(P)].
met_by[composition(meets)->ar(seS)].
met_by[composition(met_by)->ar(P)].
met_by[composition(overlaps)->ar(dfO)].
met_by[composition(overlapped_by)->ar(P)].
met_by[composition(finishes)->ar(M)].
met_by[composition(finished_by)->ar(M)].
met_by[composition(contains)->ar(P)].
met_by[composition(during)->ar(dfO)].
met_by[composition(starts)->ar(dfO)].
met_by[composition(started_by)->ar(P)].
met_by[composition(equal_to)->ar(M)].

overlaps[composition(precedes)->ar(p)].
overlaps[composition(preceded_by)->ar(DSOMP)].
overlaps[composition(meets)->ar(p)].
overlaps[composition(met_by)->ar(DSO)].
overlaps[composition(overlaps)->ar(pmo)].
overlaps[composition(overlapped_by)->ar(concur)].
overlaps[composition(finishes)->ar(osd)].
overlaps[composition(finished_by)->ar(pmoFD)].
overlaps[composition(contains)->ar(pmoFD)].
overlaps[composition(during)->ar(osd)].
overlaps[composition(starts)->ar(o)].
overlaps[composition(started_by)->ar(oFD)].
overlaps[composition(equal_to)->ar(o)].

overlapped_by[composition(precedes)->ar(pmoFD)].
overlapped_by[composition(preceded_by)->ar(P)].
overlapped_by[composition(meets)->ar(oFD)].
overlapped_by[composition(met_by)->ar(P)].
overlapped_by[composition(overlaps)->ar(concur)].
overlapped_by[composition(overlapped_by)->ar(OMP)].
overlapped_by[composition(finishes)->ar(O)].
overlapped_by[composition(finished_by)->ar(DSO)].
overlapped_by[composition(contains)->ar(DSOMP)].
overlapped_by[composition(during)->ar(dfO)].
overlapped_by[composition(starts)->ar(dfO)].
overlapped_by[composition(started_by)->ar(OMP)].
overlapped_by[composition(equal_to)->ar(O)].

finishes[composition(precedes)->ar(p)].
finishes[composition(preceded_by)->ar(P)].
finishes[composition(meets)->ar(m)].
finishes[composition(met_by)->ar(P)].
finishes[composition(overlaps)->ar(osd)].
finishes[composition(overlapped_by)->ar(OMP)].
finishes[composition(finishes)->ar(f)].
finishes[composition(finished_by)->ar(Fef)].
finishes[composition(contains)->ar(DSOMP)].
finishes[composition(during)->ar(d)].
finishes[composition(starts)->ar(d)].
finishes[composition(started_by)->ar(OMP)].
finishes[composition(equal_to)->ar(f)].

finished_by[composition(precedes)->ar(p)].
finished_by[composition(preceded_by)->ar(DSOMP)].
finished_by[composition(meets)->ar(m)].
finished_by[composition(met_by)->ar(DSO)].
finished_by[composition(overlaps)->ar(o)].
finished_by[composition(overlapped_by)->ar(DSO)].
finished_by[composition(finishes)->ar(Fef)].
finished_by[composition(finished_by)->ar(F)].
finished_by[composition(contains)->ar(D)].
finished_by[composition(during)->ar(osd)].
finished_by[composition(starts)->ar(o)].
finished_by[composition(started_by)->ar(D)].
finished_by[composition(equal_to)->ar(F)].

contains[composition(precedes)->ar(pmoFD)].
contains[composition(preceded_by)->ar(DSOMP)].
contains[composition(meets)->ar(oFD)].
contains[composition(met_by)->ar(DSO)].
contains[composition(overlaps)->ar(oFD)].
contains[composition(overlapped_by)->ar(DSO)].
contains[composition(finishes)->ar(DSO)].
contains[composition(finished_by)->ar(D)].
contains[composition(contains)->ar(D)].
contains[composition(during)->ar(concur)].
contains[composition(starts)->ar(oFD)].
contains[composition(started_by)->ar(D)].
contains[composition(equal_to)->ar(D)].

during[composition(precedes)->ar(p)].
during[composition(preceded_by)->ar(P)].
during[composition(meets)->ar(p)].
during[composition(met_by)->ar(P)].
during[composition(overlaps)->ar(pmosd)].
during[composition(overlapped_by)->ar(dfOMP)].
during[composition(finishes)->ar(d)].
during[composition(finished_by)->ar(pmosd)].
during[composition(contains)->ar(full)].
during[composition(during)->ar(d)].
during[composition(starts)->ar(d)].
during[composition(started_by)->ar(dfOMP)].
during[composition(equal_to)->ar(d)].

starts[composition(precedes)->ar(p)].
starts[composition(preceded_by)->ar(P)].
starts[composition(meets)->ar(p)].
starts[composition(met_by)->ar(M)].
starts[composition(overlaps)->ar(pmo)].
starts[composition(overlapped_by)->ar(dfO)].
starts[composition(finishes)->ar(d)].
starts[composition(finished_by)->ar(pmo)].
starts[composition(contains)->ar(pmoFD)].
starts[composition(during)->ar(d)].
starts[composition(starts)->ar(s)].
starts[composition(started_by)->ar(seS)].
starts[composition(equal_to)->ar(s)].

started_by[composition(precedes)->ar(pmoFD)].
started_by[composition(preceded_by)->ar(P)].
started_by[composition(meets)->ar(oFD)].
started_by[composition(met_by)->ar(M)].
started_by[composition(overlaps)->ar(oFD)].
started_by[composition(overlapped_by)->ar(O)].
started_by[composition(finishes)->ar(O)].
started_by[composition(finished_by)->ar(D)].
started_by[composition(contains)->ar(D)].
started_by[composition(during)->ar(dfO)].
started_by[composition(starts)->ar(seS)].
started_by[composition(started_by)->ar(S)].
started_by[composition(equal_to)->ar(S)].

equal_to[composition(precedes)->ar(p)].
equal_to[composition(preceded_by)->ar(P)].
equal_to[composition(meets)->ar(m)].
equal_to[composition(met_by)->ar(M)].
equal_to[composition(overlaps)->ar(o)].
equal_to[composition(overlapped_by)->ar(O)].
equal_to[composition(finishes)->ar(f)].
equal_to[composition(finished_by)->ar(F)].
equal_to[composition(contains)->ar(D)].
equal_to[composition(during)->ar(d)].
equal_to[composition(starts)->ar(s)].
equal_to[composition(started_by)->ar(S)].
equal_to[composition(equal_to)->ar(e)].

// a binary method is true of the complement if it is \naf of the relationship.
?x[complement->complemento(?x):Allen_Relationship[?meth]] :-
  Allen_Relationship[|=>?meth|],
  ?x:Allen_Relationship,
  \naf ?x[?meth].

// a binary method is true of the converse if the converse method is true of the relationship.
?x[converse->converseo(?x):Allen_Relationship[?cmeth]] :-
  Allen_Relationship[|=>?meth[converse_method->?cmeth]|],
  ?x:Allen_Relationship,
  ?x[?meth].

// A boolean method of an intersection is true if it is true of both parts.
?x[intersection(?y)->intersectiono(?x,?y):Allen_Relationship[?meth]] :-
  ?x:Allen_Relationship,
  ?y:Allen_Relationship,
  ?meth:Allen_Basic_Relation,
  ?x[?meth],
  ?y[?meth].

// A boolean method of a union is true if it is true of either part.
?x[union(?y)->uniono(?x,?y):Allen_Relationship[?meth]] :-
  ?x:Allen_Relationship,
  ?y:Allen_Relationship,
  ?meth:Allen_Basic_Relation,
  (
      ?x[?meth]
      ; //or
      ?y[?meth]
  ).

// The composition of two allen relationships is the union of the compositions of the basic relations from each
?x[composition(?y)->?z] :-
  ?x:Allen_Relationship,
  ?y:Allen_Relationship,
  ?list = bagof{?comps|?x[compositions_of_basic_relations(?y)->?comps]},
  unify_list_of_relations(?list,?z).

// The compositions of the basic relations of two allen relations is a cartesian composition of
// each of the basic methods of one with each of the basic methods of the other
?x[compositions_of_basic_relations(?y)->?compositions] :-
  ?x:Allen_Relationship,
  ?_xmethods:Allen_Basic_Relation,
  ?x[?_xmethods],
  ?y:Allen_Relationship,
  ?_ymethods:Allen_Basic_Relation,
  ?y[?_ymethods],
  ?_xmethods[composition(?_ymethods)->?compositions].


//unify_list_of_relations(?l,[]) :-
//  ?l == [].

// Union of a list of Allen Relations
unify_list_of_relations(?l,?h) :-  
  ?l = [?h|[]].

unify_list_of_relations(?l,?out) :-
  ?l = [?h|?tail],
  unify_list_of_relations(?tail,?result),
  ?h[union(?result)->?out].


// "Strongest implied relation" is the strongest thing we can say about
// the temporal relationship between two intervals. If you want to know
// whether one thing must necessarily happen prior to another, or during
// another, you can determine that by analyzing the strongest implied
// relation between them.
//
// We can find the strongest implied relation between two intervals by
// examining all possible chains between them, compose those chains,
// then take the intersection of the compositions.
?x[strongest_implied_relation(?y)->?z] :-
  ?x:Allen_Interval,
  ?y:Allen_Interval,
  ?all_routes = bagof{?route|?x[reachable(?y)->?route]},
  compose_list_of_routes(?all_routes,?composed_routes),
  intersect_list_of_composed_routes(?composed_routes,?z).

// Intersection of a list of Allen Relationships
intersect_list_of_composed_routes(?l,?h) :-
  ?l = [?h|[]].
intersect_list_of_composed_routes(?l,?out) :-
  ?l = [?h|?tail],
  intersect_list_of_composed_routes(?tail,?result),
  ?h[intersection(?result)->?out].

// Mapping composition to a list of routes
// Note that the routes will include links and reverse(link)s, and if the link is a reverse
// then the converse of its relationship should be used.
compose_list_of_routes(?l,[?o]) :-
  ?l = [?h|[]],
  compose_route(?h,?o).
compose_list_of_routes(?l,[?o|?result]) :-
  ?l = [?h|?tail],
  compose_route(?h,?o),
  compose_list_of_routes(?tail,?result).

// Note that the algorithm for composing a list of routes does so even if the same composition
// already exists in the output. By analogy, if the routes are ([1,4],[2,2]), it will return
// ([4,4]), including the same product twice. If this is being used exclusively for finding
// the strongest implied relation, the only remaining step is to intersect the list, so this
// is redundant. Not sure if there is a way to speed the algorithm by avoiding duplicates,
// but it might be something to look into.

// Composing a route
compose_route(?route,?rel) :-
  ?route = [?h|[]],
  \if ?h = reverse(?x)                          
  \then ?x[relationship->?_[converse->?rel]]
  \else ?h[relationship->?rel].
compose_route(?r,?out) :-
  ?r = [?h|?tail],
  \if ?h = reverse(?x)
  \then ?x[relationship->?_[converse->?rel]]
  \else ?h[relationship->?rel],
  compose_route(?tail,?result),
  ?rel[composition(?result)->?out].

// An allen link is two specific intervals, and the relationship
// between them.
Allen_Link[|
    from=>Allen_Interval,
    to=>Allen_Interval,
    relationship=>Allen_Relationship
|].

// A utility version of the method so you don't have to provide an empty path,
// and so that the resulting routes are in the right order.
?a[reachable(?b)->?n2] :-
  ?a:Allen_Interval,
  ?b:Allen_Interval,
  ?a[reachable(?b,[])->?_n],
  ?_n[reverse->?n2]@\basetype.

// An interval is reachable from another if it is directly connected.
?a[reachable(?b,?_p)->[?l|?_p]] :-
  ?a:Allen_Interval,
  ?b:Allen_Interval,
  ?l:Allen_Link[
      from->?a,
      to->?b
  ].

// An interval is also reachable from another if is connected in reverse.
?a[reachable(?b,?_p)->[reverse(?l)|?_p]] :-
  ?a:Allen_Interval,
  ?b:Allen_Interval,
  ?l:Allen_Link[
      from->?b,
      to->?a
  ].

// An interval is reachable from another if it is connected through a third
// interval with a link not already in the path.
?a[reachable(?b,?p)->?n] :-
  ?a:Allen_Interval,
  ?c:Allen_Interval,
  ?l:Allen_Link[
      from->?a,
      to->?c
  ],
  ?c !== ?b, // or this would be direct link
  \naf ?l \in ?p, // the list of links does not already include ?l or its reverse
  \naf reverse(?l) \in ?p,
  ?c[reachable(?b,[?l|?p])->?n]. // And you can get to b from c.

// Similarly if the link is in the opposite direction.
?a[reachable(?b,?p)->?n] :-
  ?a:Allen_Interval,
  ?c:Allen_Interval,
  ?l:Allen_Link[
      from->?c,
      to->?a
  ],
  ?c !== ?b, // or this would be direct link
  \naf ?l \in ?p, // the list of links does not already include ?l or its reverse
  \naf reverse(?l) \in ?p,
  ?c[reachable(?b,[reverse(?l)|?p])->?n]. // And you can get to b from c.

// Note that the reachability algorithm is currently including sequences of edges that
// pass through the same nodes. It will not follow the same bidirectional edge twice,
// but it may go through a node twice if the node has four edges. I don't think that
// negatively impacts the results, but it is likely suboptimal, since additional steps
// cannot possibly strengthen the implied relationship.

// Remaining To Do:
// A predicate to determine if one Allen Relationship is stronger or weaker than another.
// A test to see whether a system of Allen Intervals and Relationships is in the Horn
// tractable set, and then use path-consistency algorithm for determining strongest
// implied relation.
// A satisfiability predicate, which finds the SIR between all intervals that do not
// have a link, and determines if there are any null relationships, which indicates
// an unsatisfiable network. This is a form of formal verification.
// Need to look at integrating this with an event/action model, and determine if there
// is a way to use it to discover "out of time" events.

// Tests

// "John was not in the room when I touched the switch to turn on the light."
// This devolves to three intervals during which:
// * John was in the room
// * I touched the switch
// * The light was on

john_in_room:Allen_Interval.
i_touch_switch:Allen_Interval.
light_on:Allen_Interval.

// We know the relationship between the first two, and the second two.

// John being in the room and touching the switch did not happen
// at the same time. So one either precedes, meets, is preceded_by, or met_by
// the other, which are the four basic relationships in which the two intervals
// do not overlap.
john_to_switch:Allen_Link[
    from->john_in_room,
    to->i_touch_switch,
    relationship->john_to_switch_rel:Allen_Relationship[
        precedes,
        meets,
        met_by,
        preceded_by
    ]
].

// "I touched the switch to turn on the light."
// We know the light was off before I touched the switch.
// We know touching the switch is connected to the light
// coming on, with no pause between.
// We know the light stayed on when I was done touching
// the switch.
// So touching the switch either meets or overlaps with
// the light being on.
switch_to_light:Allen_Link[
    from->i_touch_switch,
    to->light_on,
    relationship->switch_to_light_rel:Allen_Relationship[
        meets,
        overlaps
    ]
].

// Now we can display the strongest implied relationship
// between john being in the room and the light being on
// by issuing the following query:
// ?- john_in_room[strongest_implied_relation(light_on)->?_[%display]].

// Which will display "pPMOfdsSe"
// The excluded relationship are moFD
// It is not possible that john being in the room was true up until the moment the light was on.
// It is not possible that john being in the room began before and lasted until after the light being on started.
// It is not possible that the light turned off at the same time that john was no longer in the room.
// It is not possible that the light turned on and off while john stayed in the room.
// All other temporal relationships are possible.

// Rock Paper Scissors Example
game:Allen_Interval.
players_count:Allen_Interval.
player1_throws:Allen_Interval.
player2_throws:Allen_Interval.
player1_sees:Allen_Interval.
player2_sees:Allen_Interval.

l1:Allen_Link[
    from->game,
    to->players_count,
    relationship->l1rel:Allen_Relationship[
        contains,
        started_by
    ]
].

l2:Allen_Link[
    from->game,
    to->player1_throws,
    relationship->l2rel:Allen_Relationship[
        contains
    ]
].

l3:Allen_Link[
    from->game,
    to->player2_throws,
    relationship->l3rel:Allen_Relationship[
        contains
    ]
].

l4:Allen_Link[
    from->game,
    to->player1_sees,
    relationship->\l4rel:Allen_Relationship[
        contains,
        finished_by
    ]
].

l5:Allen_Link[
    from->game,
    to->player2_sees,
    relationship->l5rel:Allen_Relationship[
        contains,
        finished_by
    ]
].

l6:Allen_Link[
    from->player1_throws,
    to->player2_sees,
    relationship->l6rel:Allen_Relationship[
        precedes,
        meets
    ]
].

l7:Allen_Link[
    from->player2_throws,
    to->player1_sees,
    relationship->l7rel:Allen_Relationship[
        precedes,
        meets
    ]
].

l8:Allen_Link[
    from->players_count,
    to->player1_throws,
    relationship->l8rel:Allen_Relationship[
        precedes,
        meets
    ]
].

l9:Allen_Link[
    from->players_count,
    to->player2_throws,
    relationship->l9rel:Allen_Relationship[
        precedes,
        meets
    ]
].