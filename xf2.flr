// XF2 - Explained Flora-2
// By Jason Morris for Singapore Management University Centre for Computational Law
//
// TO DO:
// * Make it so that nested AND and OR elements are at the same level.
// * Right now the display method on the explanation objects runs only once.
//   There is documentation in the ErgoAI documentation google folder that shows
//   how to make it run repeatedly.
// * Figure out why generating an explanation for wednesday[sibling->Pugsley] generates
//   100 warnings about unbound variables. (Probably negation issues.)
// * Explanations involving prolog-style negation do not include all the required subgoals.


:- compiler_options{expert=on}.
?- setruntime{unsafe_naf(ignore)}.

// The following code sets out a tree structure for explanations to be built inside.

xf2Explanation[|
    goal=>\symbol,
    subgoals=>xf2Explanation,
    satisfied=>\boolean,
    desc=>\string|].

?x[display] :-
  ?x:xf2Explanation,
  ?x[display(0)].

remove_reification(?original,?new) :-
  substitute('\$\{',?original,'',?_temp)@\prolog(pcre),
  substitute('\}',?_temp,'',?_temp2)@\prolog(pcre),
  substitute('\@main',?_temp2,'',?_temp3)@\prolog(pcre),
  substitute('\\\\naf',?_temp3,'it is not true that',?_temp4)@\prolog(pcre),
  substitute('\\\\neg',?_temp4,'it is provably false that',?_temp5)@\prolog(pcre),
  substitute(', ',?_temp5,' and ',?_temp6)@\prolog(pcre),
  substitute('; ',?_temp6,' or ',?_temp7)@\prolog(pcre),
  substitute('\[',?_temp7,' has a ',?_temp8)@\prolog(pcre),
  substitute('\-\>',?_temp8,', ',?_temp9)@\prolog(pcre),
  substitute('\]',?_temp9,'',?_temp10)@\prolog(pcre),
  substitute('\?',?_temp10,'an object ',?new)@\prolog(pcre).

?x[display(?n)] :-
  ?x:xf2Explanation[desc->?d,goal->?g,satisfied->?s],
  tab(?n)@\prolog,
  \if ?n == 0 \then write('Goal: ')@\io \else write('Subgoal: ')@\io,
  \symbol[toType(?g)->?rg]@\basetype,
  \string[toType(?rg)->?sg]@\basetype,
  // At this point it would be possible to do string manipulation if I had the libraries
  remove_reification(?sg,?newsg),
  substitute(':',?newsg,' is a ',?newsg2)@\prolog(pcre),
  ?newsg2[rawValue->?rsg]@\basetype,
  write(?rsg)@\io,
  \if ?s \then write(' is satisfied.\n')@\io \else write(' is not satisfied.\n')@\io,
  tab(?n)@\prolog,
  ?d[rawValue->?rd]@\basetype,
  write(?rd)@\io,
  write('\n')@\io,
  ?o \is ?n+1,
  forall(?subs)^(?x[subgoals->?subs] ~~> ?subs[display(?o)]),
  !.

xf2Bool::xf2Explanation.
xf2Conjunction::xf2Explanation.
xf2Disjunction::xf2Explanation.
xf2Negation::xf2Explanation.
xf2BaseFact::xf2Explanation.
xf2Rule::xf2Explanation.

// debugging(on).

// If the goal of an explanation is "\true", it is satisfied,
// because true is always true.
?x:xf2Bool[satisfied->\true,desc->'True is self-evident.'] :-
  ?x:xf2Explanation[goal->\true],
  \if debugging(on) \then write('Found \\true goal, set to satisfied.\n')@\io.

// If the goal of an explanation is "\false", it is not satisfied,
// because false is always false.
?x:xf2Bool[satisfied->\false,desc->'False is self-evident.'] :-
  ?x:xf2Explanation[goal->\false],
  \if debugging(on) \then write('Found \\false goal, set to satisfied.\n')@\io.

// If the goal is provided by the user, it is a basefact, and is
// satisfied.
?x:xf2BaseFact[satisfied->\true,desc->'We know this because it was stated by the user.'] :-
  ?x:xf2Explanation[goal->?goal],
  isbasefact{?goal},
  \if debugging(on) \then write('Found basefact goal, set to satisfied.\n')@\io.

// If there is a rule explanation, whether it is satisfied depends on
// whether the rulebody is satisfied.
?x[satisfied->?sat] :-
  ?x:xf2Rule[subgoals->?_[satisfied->?sat]],
  \if debugging(on) \then write('Setting satisfaction of rule.\n')@\io.

// If the goal is the conclusion of a rule, there is a node for the
// rule with one sub-node for the body.
?x:xf2Rule[desc->?d, subgoals->subgoal(?body):xf2Explanation[goal->?body]] :-
  ?x:xf2Explanation[goal->?goal],
  clause{?goal,?body},
  \if clause{@!{?_Tag[description->?desc]} ?goal, ?body}
  \then "We know this because there is a rule: "^^\string[concat(?desc)->?d]@\basetype
  \else ?d = "We know this because there is a rule."^^\string,
  \if debugging(on) \then write('Adding a body node to a rule with a description.\n')@\io.

// If the goal is a negation, the subgoal is the negated part
?x:xf2Negation[desc->'', subgoals->subgoal(?first):xf2Explanation[goal->?first]] :-
  ?x:xf2Explanation[goal->?goal],
  ?goal =.. [?g1|?g2],
  ?g1 == negation(naf),
  ?g2 = [?first|?_rest], // This presumes negations will only ever have one item in the list, as they are unary operators.
  \if debugging(on) \then write('Adding subnode to negation.\n')@\io.

// A negation is satisfied if its subgoal is not.
// This tests for whether there is a \naf of satisfied->\true, because
// searching for false is never found for objects that don't exist?
?x[satisfied->\true] :-
  ?x:xf2Negation[subgoals->?_sg[\naf satisfied->\true]],
  \if debugging(on) \then write('Negation satisfied.\n')@\io.

// A negation is not satisfied if its subgoal is.
?x[satisfied->\false] :-
  ?x:xf2Negation[subgoals->?_sg[satisfied->\true]],
  \if debugging(on) \then write('Negation not satisfied.\n')@\io.

// If the goal is a conjunction, there is a subgoal for each of the parts of the second half.
?x:xf2Conjunction[desc->'',subgoals->subgoal(?g3):xf2Explanation[goal->?g3]] :-
  ?x:xf2Explanation[goal->?goal],
  ?goal =.. [?g1|?g2],
  ?g1 == logic(and),
  ?g3 \in ?g2, // There is a list, and this rule should unify with all of the members.
  \if debugging(on) \then write('Adding a subgoal to a conjunction.\n')@\io.

// If the goal is a conjunction, and all of the subgoals are satisfied, the goal is satisfied.
?x[satisfied->\true] :-
  ?x:xf2Conjunction,
  forall(?subs)^(?x[subgoals->?subs] ~~> ?subs[satisfied->\true]),
  \if debugging(on) \then write('Finding a satisfied conjunction.\n')@\io.

// If the goal is a conjunction, and not all of the subgoals are satisfied, the goal is not satisfied.
?x[satisfied->\false] :-
  ?x:xf2Conjunction,
  ?x[subgoals->?_[satisfied->\false]],
  \if debugging(on) \then write('Finding an unsatisfied conjunction.\n')@\io.

// If the goal is a disjunction, there is a subgoal for each of the parts of the second half.
?x:xf2Disjunction[desc->'',subgoals->subgoal(?g3):xf2Explanation[goal->?g3]] :-
  ?x:xf2Explanation[goal->?goal],
  ?goal =.. [?g1|?g2],
  ?g1 == logic(or),
  ?g3 \in ?g2, // There is a list, and this rule should unify with all of the members.
  \if debugging(on) \then write('Adding a subgoal to a disjunction.\n')@\io.

// If the goal is a disjunction, and any of the subgoals are satisfied, the goal is satisfied.
?x[satisfied->\true] :-
  ?x:xf2Disjunction,
  ?x[subgoals->?_[satisfied->\true]],
  \if debugging(on) \then write('Finding a satisfied disjunction.\n')@\io.

// If the goal is a disjunction, and all of the subgoals are not satisfied, the goal is not satisfied.
?x[satisfied->\false] :-
  ?x:xf2Disjunction,
  forall(?subs)^(?x[subgoals->?subs] ~~> ?subs[satisfied->\false]),
  \if debugging(on) \then write('Finding an unsatisfied disjunction.\n')@\io.